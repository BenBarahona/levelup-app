[
  {
    "id": "ERC20",
    "name": "ERC20 Basics",
    "index": 1,
    "level": 1,
    "website": "https://github.com/LevelUpWeb3/ERC20-Mission",
    "summary": "Introduction to implementing a basic ERC20 token with minting, burning, transferring, and approving functionalities.",
    "heroImage": "/images/level-up-preview.png",
    "labels": [
      "Defi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"ERC20 Basics\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you will implement a basic ERC20 token contract that includes minting, burning, transferring, and approving functionalities. Follow the instructions provided in the comments to complete the contract.\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./ERC20.sol\";\n\n// Define your ERC20 token contract\ncontract MyToken is ERC20 {\n\n    // Constructor that mints the initial supply to the deployer of the contract\n    constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n        // Mint the initial supply of tokens to the deployer's address\n    }\n\n    // Function to mint new tokens to a specified address\n    function mint(address to, uint256 amount) public {\n        // Implement the mint function using the _mint internal function\n    }\n\n    // Function to burn tokens from a specified address\n    function burn(address from, uint256 amount) public {\n        // Implement the burn function using the _burn internal function\n    }\n\n    // Function to transfer tokens from the caller's address to a specified address\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        // Implement the transfer function using the _transfer internal function\n    }\n\n    // Function to approve an address to spend a certain amount of tokens on behalf of the caller\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        // Implement the approve function using the _approve internal function\n    }\n\n    // Function to transfer tokens from one address to another using an allowance\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        // Implement the transferFrom function using the _transfer and _approve internal functions\n    }\n\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Instructions\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Constructor:\"\n          }), \" The constructor should initialize the ERC20 token by minting the \", _jsx(_components.code, {\n            children: \"initialSupply\"\n          }), \" to the deployer's address. Use the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Mint Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"mint\"\n          }), \" function, which should allow you to create new tokens and assign them to a specific address. This function should call the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Burn Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"burn\"\n          }), \" function, which should allow you to destroy tokens from a specific address, reducing the total supply. Use the \", _jsx(_components.code, {\n            children: \"_burn\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Transfer Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function to allow the caller to send tokens to another address. Override the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Approve Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function, allowing the caller to authorize another address to spend a certain amount of tokens on their behalf. Override the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"TransferFrom Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function to allow a spender to transfer tokens from one address to another, using an allowance set by the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function. Override the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" functions to implement this functionality.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "Swap",
    "name": "Swap",
    "index": 2,
    "level": 2,
    "website": "https://github.com/LevelUpWeb3/ERC20-Mission",
    "summary": "Introduction to implementing a basic swapping contract by understanding Uniswap V2 router.",
    "heroImage": "/images/level-up-preview.png",
    "labels": [
      "Defi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Swap\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you'll implement a basic Uniswap V2-based swapping contract.\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract Swap {\n// Provide the Uniswap V2 router address and the WETH address\n\n    // Define the constructor\n    constructor(...) {\n        // Initialize the addresses\n    }\n\n    // Create a swap function that takes input and output token addresses,\n    // the input amount, the minimum output amount, and the recipient's address\n    function swap(\n        ...\n    ) external {\n        // Transfer the input tokens from the sender to the contract\n\n        // Approve the Uniswap router to spend the input tokens\n\n        // Define the swapping path: directly between the tokens if either is WETH,\n        // or through WETH otherwise\n\n        // Call the Uniswap router's swapExactTokensForTokens function to execute the swap\n    }\n\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Constant Product Formula\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The constant product formula is used to calculate how much token B will be received by a user who sends \", _jsx(_components.em, {\n        children: \"a\"\n      }), \" amount of token A:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"a · b = k\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"a\"\n        }), \" denotes the amount of token A,\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"b\"\n        }), \" denotes the amount of token B, and\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"k\"\n        }), \" is a constant (always).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How does it work?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say Alice wants to swap her 1 ETH to DAI.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice goes to ETH/DAI pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"For the sake of simplicity, let us assume there are 10 ETH and 25,000 DAI in the pool. Therefore\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  k = (10) × (25,000) = (250,000)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice sends her 1 ETH to the pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now, the pool has 11 ETH and 25,000 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The pool sends such amount of DAI to Alice that \", _jsx(_components.em, {\n          children: \"k\"\n        }), \" remains constant.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  (11) × (25,000 - amountDAI) = 250,000\\n  amountDAI = 2,272.73\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice receives 2,272.73 DAI for 1 ETH she had.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now the pool has 11 ETH and 22,727.27 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you multiply these two numbers, you get the same \", _jsx(_components.em, {\n          children: \"k=250,000\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"The Essence of the \", _jsx(_components.code, {\n        children: \"swapExactTokensForTokens()\"\n      })]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `function swapExactTokensForTokens(\n  uint amountIn,\n  uint amountOutMin,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external returns (uint[] memory amounts) {}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Key Points\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As you will use an external function from Uniswap V2 Router, you need to know what kind of new types are needed to implement.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be careful if you need an intermediary step when you build the swapping path (non-WETH case).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build the Contract\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"As you'll use Uniswap V2 Router, you need to define the contract address of it.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"For non-WETH cases, you'll need to add an intermediary step into the swapping path, so you need to define WETH address too.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Build the function:\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"a. Recall from the ERC20 mission that you need token approval.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"b. Define the swapping path.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"c. Specify the conditional for the case where no token is WETH.\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"d. Call \", _jsx(_components.code, {\n            children: \"swapExactTokensForTokens()\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Define the needed interface for the router.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Define the needed interface for WETH.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@arbnom/navigating-the-defi-landscape-a-comprehensive-deep-dive-to-amms-954020ec23b\",\n          children: \"A Comprehensive Deep Dive to AMMs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.uniswap.org/contracts/v2/concepts/protocol-overview/how-uniswap-works\",\n          children: \"How Uniswap works\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
      "frontmatter": {},
      "scope": {}
    }
  }
]
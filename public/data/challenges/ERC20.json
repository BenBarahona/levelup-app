{
  "id": "ERC20",
  "name": "ERC20 Basics",
  "index": 1,
  "level": 1,
  "website": "https://github.com/LevelUpWeb3/ERC20-Mission",
  "summary": "Introduction to implementing a basic ERC20 token with minting, burning, transferring, and approving functionalities.",
  "heroImage": "/images/level-up-preview.png",
  "labels": [
    "Defi"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true, \"8:1-45:26\");\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"ERC20 Basics\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"In this challenge, you will implement a basic ERC20 token contract that includes minting, burning, transferring, and approving functionalities. Follow the instructions provided in the comments to complete the contract.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(ContentCopy, {\n      code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./ERC20.sol\";\n\n// Define your ERC20 token contract\ncontract MyToken is ERC20 {\n\n    // Constructor that mints the initial supply to the deployer of the contract\n    constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n        // Mint the initial supply of tokens to the deployer's address\n    }\n\n    // Function to mint new tokens to a specified address\n    function mint(address to, uint256 amount) public {\n        // Implement the mint function using the _mint internal function\n    }\n\n    // Function to burn tokens from a specified address\n    function burn(address from, uint256 amount) public {\n        // Implement the burn function using the _burn internal function\n    }\n\n    // Function to transfer tokens from the caller's address to a specified address\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        // Implement the transfer function using the _transfer internal function\n    }\n\n    // Function to approve an address to spend a certain amount of tokens on behalf of the caller\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        // Implement the approve function using the _approve internal function\n    }\n\n    // Function to transfer tokens from one address to another using an allowance\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        // Implement the transferFrom function using the _transfer and _approve internal functions\n    }\n}`,\n      language: \"solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"Instructions\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 47,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ol, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Constructor:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 49,\n            columnNumber: 4\n          }, this), \" The constructor should initialize the ERC20 token by minting the \", _jsxDEV(_components.code, {\n            children: \"initialSupply\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 49,\n            columnNumber: 86\n          }, this), \" to the deployer's address. Use the \", _jsxDEV(_components.code, {\n            children: \"_mint\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 49,\n            columnNumber: 137\n          }, this), \" function provided by the ERC20 contract.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 49,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 49,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Mint Function:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 51,\n            columnNumber: 4\n          }, this), \" Implement the \", _jsxDEV(_components.code, {\n            children: \"mint\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 51,\n            columnNumber: 37\n          }, this), \" function, which should allow you to create new tokens and assign them to a specific address. This function should call the \", _jsxDEV(_components.code, {\n            children: \"_mint\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 51,\n            columnNumber: 167\n          }, this), \" function provided by the ERC20 contract.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 51,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Burn Function:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 53,\n            columnNumber: 4\n          }, this), \" Implement the \", _jsxDEV(_components.code, {\n            children: \"burn\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 53,\n            columnNumber: 37\n          }, this), \" function, which should allow you to destroy tokens from a specific address, reducing the total supply. Use the \", _jsxDEV(_components.code, {\n            children: \"_burn\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 53,\n            columnNumber: 155\n          }, this), \" function provided by the ERC20 contract.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 53,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 53,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Transfer Function:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 55,\n            columnNumber: 4\n          }, this), \" Implement the \", _jsxDEV(_components.code, {\n            children: \"transfer\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 55,\n            columnNumber: 41\n          }, this), \" function to allow the caller to send tokens to another address. Override the \", _jsxDEV(_components.code, {\n            children: \"transfer\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 55,\n            columnNumber: 129\n          }, this), \" function and use the \", _jsxDEV(_components.code, {\n            children: \"_transfer\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 55,\n            columnNumber: 161\n          }, this), \" function from the ERC20 contract.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 55,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 55,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Approve Function:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 4\n          }, this), \" Implement the \", _jsxDEV(_components.code, {\n            children: \"approve\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 40\n          }, this), \" function, allowing the caller to authorize another address to spend a certain amount of tokens on their behalf. Override the \", _jsxDEV(_components.code, {\n            children: \"approve\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 175\n          }, this), \" function and use the \", _jsxDEV(_components.code, {\n            children: \"_approve\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 206\n          }, this), \" function from the ERC20 contract.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 57,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 57,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"TransferFrom Function:\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 4\n          }, this), \" Implement the \", _jsxDEV(_components.code, {\n            children: \"transferFrom\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 45\n          }, this), \" function to allow a spender to transfer tokens from one address to another, using an allowance set by the \", _jsxDEV(_components.code, {\n            children: \"approve\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 166\n          }, this), \" function. Override the \", _jsxDEV(_components.code, {\n            children: \"transferFrom\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 199\n          }, this), \" function and use the \", _jsxDEV(_components.code, {\n            children: \"_transfer\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 235\n          }, this), \" and \", _jsxDEV(_components.code, {\n            children: \"_approve\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 251\n          }, this), \" functions to implement this functionality.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 59,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 59,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 49,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component, place) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\" + (place ? \"\\nIt’s referenced in your code at `\" + place + \"`\" : \"\"));\n}\n",
    "frontmatter": {},
    "scope": {}
  }
}
{
  "id": "swapping",
  "name": "Swap",
  "index": 2,
  "level": 2,
  "website": "https://github.com/LevelUpWeb3/ERC20-Mission",
  "summary": "Introduction to implementing a basic swapping contract by understanding Uniswap V2 router.",
  "heroImage": "/images/level-up-preview.png",
  "labels": [
    "Defi"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Swap\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Constant Product Formula\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The constant product formula is used to calculate how much token B will be received by a user who sends $a$ amount of token A:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$$ a \\\\cdot b = k $$\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$a$ denotes the amount of token A,\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$b$ denotes the amount of token B, and\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"$k$ is a constant (always).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How does it work?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say Alice wants to swap her 1 ETH to DAI.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice goes to ETH/DAI pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"For the sake of simplicity, let us assume there are 10 ETH and 25,000 DAI in the pool. Therefore\\n$$k = (10) \\\\times (25,000) = (250,000)$$.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice sends her 1 ETH to the pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now, the pool has 11 ETH and 25,000 DAI.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The pool sends such amount of DAI to Alice that $k$ remains constant.\\n$$(11) \\\\times (25,000 - amountDAI) = 250,000$$\\n$$amountDAI = 2,272.73$$.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice receives 2,272.73 DAI for 1 ETH she had.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now the pool has 11 ETH and 22,727.27 DAI.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"If you multiply these two numbers, you get the same $k=250,000$.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"The Essence of the \", _jsx(_components.code, {\n        children: \"swapExactTokensForTokens()\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"function swapExactTokensForTokens(\\n  uint amountIn,\\n  uint amountOutMin,\\n  address[] calldata path,\\n  address to,\\n  uint deadline\\n) external returns (uint[] memory amounts) {\\n\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Key Points\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As you will use an external function from Uniswap V2 Router, you need to know what kind of new types are needed to implement.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be careful if you need an intermediary step when you build the swapping path (non-WETH case).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build the Contract\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As you'll use Uniswap V2 Router, you need to define the contract address of it.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"For non-WETH cases, you'll need to add an intermediary step into the swapping path, so you need to define WETH address too.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Build the function:\\na. Recall from the ERC20 mission that you need token approval.\\nb. Define the swapping path.\\nc. Specify the conditional for the case where no token is WETH.\\nd. Call \", _jsx(_components.code, {\n          children: \"swapExactTokensForTokens()\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Define the needed interface for the router.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Define the needed interface for WETH.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@arbnom/navigating-the-defi-landscape-a-comprehensive-deep-dive-to-amms-954020ec23b\",\n          children: \"A Comprehensive Deep Dive to AMMs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.uniswap.org/contracts/v2/concepts/protocol-overview/how-uniswap-works\",\n          children: \"How Uniswap works\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}
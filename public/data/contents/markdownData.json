[
  {
    "id": "exploring-solidity-objects-address-part-1",
    "name": "Exploring Solidity Objects: Address - Part 1",
    "index": 1,
    "summary": "Dive into the world of Solidity in pursuit of leveling up! Starting with Address object.",
    "author": "RH",
    "authorIcon": "https://pbs.twimg.com/profile_images/1751242830398287872/8VKShh46.jpg",
    "authorLink": "https://x.com/rh_bdl",
    "published": "Jul 03, 2024",
    "readTime": "3 min read",
    "labels": [
      "Smart Contract"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"If you have been tinkering with Solidity, you might have used or came across the \", _jsx(_components.code, {\n        children: \"address\"\n      }), \" object in Solidity. Common use cases of this object includes reading \", _jsx(_components.code, {\n        children: \"address\"\n      }), \" balance, and sending tokens.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this article, we will explore the different members of \", _jsx(_components.code, {\n        children: \"address\"\n      }), \" while referencing Solidity's \", _jsx(_components.a, {\n        href: \"https://docs.soliditylang.org/en/latest/cheatsheet.html#members-of-address\",\n        children: \"docs\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"1. Balance\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The balance member provides access to read balance of address in Wei (1 Ether = 10^18 Wei).\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `function retrieveBalance() public view returns (uint256) {\n    //returns ETH balance of deployed contract in Wei\n    return address(this).balance;\n}\n\nfunction retrieveUserBalance(address user) public view returns (uint256) {\n    //returns ETH balance of user's address in Wei\n    return address(user).balance;\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"retrieveBalance()\"\n      }), \" function is an example of a gotcha that catches new Solidity devs off-guard. It is not unusual to assume that \", _jsx(_components.code, {\n        children: \"address(this).balance\"\n      }), \" would return the balance of our address. In reality, it is the balance of the smart contract itself that is read.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"2. Code\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"code\"\n      }), \" member allows us to query the deployed contract’s bytecode information.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `function retrieveCode() public view returns (bytes memory) {\n    //returns EVM bytecode\n    return address(this).code;\n}\n\nfunction retrieveCodehash() public view returns (bytes32) {\n    //returns Keccak-256 hash of the EVM bytecode\n    return address(this).codehash;\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"retrieveCode()\"\n      }), \" queries the EVM bytecode and in this example, the output looks something like this “0x60806040…4300081a0033”.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is useful for contract verification purposes. \", _jsx(_components.a, {\n        href: \"https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\",\n        children: \"Here\"\n      }), \" is an example of WETH’s deployed contract in Etherscan. Scroll below to see the Deployed Bytecode’s output.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"retrieveCodehash()\"\n      }), \" simply provides the Keccak-256 hash of the output. It provides a more efficient way to verify the deployed contract as it is cheaper in terms of gas costs.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"3. Transfer, Send & Call\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"• Transfer & Send\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Typically invoked for sending Ether. Level Up has also put together a \", _jsx(_components.a, {\n        href: \"(https://www.levelupweb3.xyz/solidity/transacting-ether)\",\n        children: \"guide\"\n      }), \" covering these members. The section below covers the output/responses when using these members.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `function transferKeyword(uint256 ethAmount) public {\n    // NOT recommended for sending Ether\n    // Reverts with error if txn fails\n    payable(address(this)).transfer(ethAmount);\n}\n\nfunction sendKeyword(uint256 ethAmount) public returns (bool) {\n    // NOT recommended for sending Ether\n    // Reverts with bool: \"false\" if txn fails\n    return payable(address(this)).send(ethAmount);\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"transfer\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"send\"\n      }), \" members are \", _jsx(_components.em, {\n        children: \"not\"\n      }), \" recommended for sending Ether. Take note on the expected responses if you plan to use them.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In situations of failed transactions, \", _jsx(_components.code, {\n        children: \"transfer\"\n      }), \" reverts with an error while \", _jsx(_components.code, {\n        children: \"send\"\n      }), \" returns a boolean value of \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" (but the transaction will be successful).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Note: \", _jsx(_components.code, {\n          children: \"send\"\n        }), \" updates state, but \", _jsx(_components.code, {\n          children: \"transfer\"\n        }), \" does not. Both members still consume gas regardless of the transaction status.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"• Call\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `function callKeyword(uint256 ethAmount) public {\n    // RECOMMENDED method to send Ether\n    // Passing blanks (\"\") because the example below shows empty calldata\n    (bool sent, ) = address(this).call{value: ethAmount}(\"\");\n    require(sent, \"Failed to send Ether\");\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"call\"\n      }), \" is recommended due to its \", _jsx(_components.a, {\n        href: \"https://forum.openzeppelin.com/t/should-we-never-use-the-transfer-function/38445\",\n        children: \"flexibility for sending Ether\"\n      }), \". It also allows you to pass arguments if interacting with custom functions that require any parameters.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This concludes part 1. In the next part, we will cover other members of the address object such as \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \". Stay tuned!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "exploring-solidity-objects-address-part-2",
    "name": "Exploring Solidity Objects: Address - Part 2",
    "index": 2,
    "summary": "Dive into the world of Solidity in pursuit of leveling up! Venturing into delegatecall and staticcall functions!",
    "author": "RH",
    "authorIcon": "https://pbs.twimg.com/profile_images/1751242830398287872/8VKShh46.jpg",
    "authorLink": "https://x.com/rh_bdl",
    "published": "Aug 06, 2024",
    "readTime": "6 min read",
    "labels": [
      "Smart Contract"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    strong: \"strong\",\n    h2: \"h2\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {ContentCopy, YoutubeEmbed} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true);\n  if (!YoutubeEmbed) _missingMdxReference(\"YoutubeEmbed\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.a, {\n        href: \"https://rhbdl.substack.com/p/exploring-solidity-objects-address?r=1v972g\",\n        children: \"Part 1\"\n      }), \", we explored different \", _jsx(_components.code, {\n        children: \"address\"\n      }), \" members and their use cases. While the previous article explored scenarios involving sending Ether, it is helpful to know that the functionalities extend beyond that.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For instance, the \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" function is a low-level function which has the capability to invoke any function on any target contract by specifying the function signature and arguments in the \\\"data\\\" parameter. \", _jsx(_components.strong, {\n        children: \"(Security Note: call never reverts. It is our responsibility to handle unsuccessful transaction errors.)\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, let's delve into the final two members of the address object: \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \". These members are also interchangeably referred as functions - particularly when describing their role in code execution through invocation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The underlying concept of \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \" is relatively straightforward, as they are essentially specialized variants of the \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"1. delegatecall\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This function allows state modifying instructions while preserving the original contract's context (storage, sender address, and value).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At this point, you might be wondering about the terminology “delegatecall”. How exactly are the function calls “delegated”? Or rather, what is the mode of “delegation” here?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's utilise the code below to answer these questions!\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `pragma solidity ^0.8.24;\n\ncontract Caller {\nuint256 public value;\n\n    function setVars(uint256 _value) public payable {\n        value = _value;\n    }\n\n}\n\ncontract DelegateCaller {\nuint256 public value;\n\n    function setVars(address _callerContract, uint256 _value) public payable {\n        // Caller delegated its setVars() function to DelegateCaller Contract\n        (bool success, ) = _callerContract.delegatecall(\n            abi.encodeWithSignature(\"setVars(uint256)\", _value)\n        );\n        if (!success) revert(\"Failed\");\n    }\n\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"setVars()\"\n      }), \" is called in DelegateCaller contract, the \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \" invokes the \", _jsx(_components.code, {\n        children: \"setVars()\"\n      }), \" function in the Caller contract but in the DelegateCaller execution environment.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Thus, Caller contract has effectively delegated its function to DelegateCaller contract.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's explore further using the video below! (\", _jsxs(_components.strong, {\n        children: [\"Watch what happens when \", _jsx(_components.code, {\n          children: \"setVars()\"\n        }), \" was called in DelegateCaller contract.\"]\n      }), \" Observe how the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" variables change in the context of Caller and DelegateCaller contract.)\"]\n    }), \"\\n\", _jsx(YoutubeEmbed, {\n      id: \"IUhr8N_WroI\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"Were you able to identify the contract that had its \", _jsx(_components.code, {\n          children: \"value\"\n        }), \" variable updated when \", _jsx(_components.code, {\n          children: \"delegatecall\"\n        }), \" was invoked?\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This behavior might seem redundant at first when we can simply use \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" function. However, \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \" enables use cases such as for proxy contracts - where only the implementation contract (i.e. Uniswap V2, V3) is upgraded to preserve the context of the proxy contract.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Having explored the complexities of \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \", let’s proceed to explore \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" which is relatively simpler!\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"2. staticcall\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In general, \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" does not allow any state modifying instructions or capability to send ether. It will revert if there are any state changes during the function invocation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At a low-level, it disallows opcodes such as CREATE, SSTORE, SELFDESTRUCT, and few \", _jsx(_components.a, {\n        href: \"https://www.evm.codes/#fa?fork=cancun\",\n        children: \"others\"\n      }), \". Personally, I view \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" as a safer variant of the call function to read state.\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      className: \"text-center\",\n      children: [_jsx(\"img\", {\n        src: \"/images/contents/staticcall.png\",\n        alt: \"staticcall example\",\n        width: \"750\"\n      }), _jsx(_components.p, {\n        children: _jsxs(_components.em, {\n          children: [\"Figure 1: \", _jsx(_components.code, {\n            children: \"staticcall\"\n          }), \" example\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the example above, notice how the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" variable for StaticCaller contract did not change. It remains as “0” even when Caller contract has been updated to store “100” in its \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" variable. Unlike \", _jsx(_components.code, {\n        children: \"delegatecall\"\n      }), \" which allows state modifying instruction, \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" only reads state of the target contract (Caller contract in this example).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As a treat, I have also included a function \", _jsx(_components.code, {\n        children: \"setVars()\"\n      }), \" which purposefully calls a state modifying function from the target contract to simulate transaction failure. Watch the video towards the end to learn what happens when \", _jsx(_components.code, {\n        children: \"success\"\n      }), \" returns false.\"]\n    }), \"\\n\", _jsx(YoutubeEmbed, {\n      id: \"iGQ5z6B1PQw\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"text-center\",\n      children: _jsx(_components.p, {\n        children: _jsxs(_components.em, {\n          children: [\"Explore this code further here:\\n\", _jsx(_components.a, {\n            href: \"https://remix.ethereum.org/?#code=Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVApwcmFnbWEgc29saWRpdHkgXjAuOC4yNDsKCmNvbnRyYWN0IENhbGxlciB7CiAgICB1aW50MjU2IHB1YmxpYyB2YWx1ZTsKCiAgICBmdW5jdGlvbiBzZXRWYXJzKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgdmFsdWUgPSBfdmFsdWU7CiAgICB9CgogICAgZnVuY3Rpb24gcmVhZFZhbHVlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KfQoKY29udHJhY3QgU3RhdGljQ2FsbGVyIHsKICAgIHVpbnQyNTYgcHVibGljIHZhbHVlOwoKICAgIGZ1bmN0aW9uIHNldFZhcnMoYWRkcmVzcyBfY2FsbGVyQ29udHJhY3QsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgKGJvb2wgc3VjY2VzcywgKSA9IF9jYWxsZXJDb250cmFjdC5zdGF0aWNjYWxsKAogICAgICAgICAgICBhYmkuZW5jb2RlV2l0aFNpZ25hdHVyZSgic2V0VmFycyh1aW50MjU2KSIsIF92YWx1ZSkKICAgICAgICApOwogICAgICAgIGlmKCFzdWNjZXNzKSByZXZlcnQgKCJFcnJvciBpbiBzdGF0aWNjYWxsIik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVhZFZhcnMoYWRkcmVzcyBfY2FsbGVyQ29udHJhY3QpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAoLCBieXRlcyBtZW1vcnkgZGF0YSkgPSBfY2FsbGVyQ29udHJhY3Quc3RhdGljY2FsbChhYmkuZW5jb2RlV2l0aFNpZ25hdHVyZSgicmVhZFZhbHVlKCkiKSk7CiAgICAgICAgcmV0dXJuIGFiaS5kZWNvZGUoZGF0YSwgKHVpbnQyNTYpKTsKICAgIH0KfQ&lang=en&optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.26+commit.8a97fa7a.js\",\n            children: \"staticcall.sol\"\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.a, {\n        href: \"https://ethglobal.com/events/brussels/prizes/scroll\",\n        children: \"ETH CC Brussels\"\n      }), \", Scroll introduced the experimental \", _jsx(_components.a, {\n        href: \"https://ethereum-magicians.org/t/rip-7728-l1sload-precompile/20388\",\n        children: \"L1SLOAD precompile\"\n      }), \" which uses \", _jsx(_components.code, {\n        children: \"staticcall\"\n      }), \" under the hood.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hackers were able to explore novel methods of resolving ENS address, extending NFT ownership - all on L2. Despite preliminary stage of experimentation, this highlights that the potential opportunities for this function are virtually limitless.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that you have equipped yourself with an arsenal of knowledge on the \", _jsx(_components.code, {\n        children: \"address\"\n      }), \" object, you are now capable of address-ing (Hehe! Pun intended) more intermediate to advanced level builds. Can't wait to hear all about how you will be using this knowledge to level up your projects.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "level-up-foundry",
    "name": "Level Up: Building with Foundry",
    "index": 3,
    "summary": "Learn smart contract development with Foundry, a blazingly fast framework for building and deploying smart contracts!",
    "author": "RH",
    "authorIcon": "https://pbs.twimg.com/profile_images/1751242830398287872/8VKShh46.jpg",
    "authorLink": "https://x.com/rh_bdl",
    "published": "Sep 09, 2024",
    "readTime": "11 min read",
    "labels": [
      "Smart Contract"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In Level Up, this Foundry module is designed to reduce friction by immediately equipping you with fundamental skills to develop smart contracts on Scroll Sepolia.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In order to facilitate this process, we have curated a simplified structure to help you get started with Foundry on Scroll Sepolia.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are feeling adventurous, jump into your code editor and follow along!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"What is Foundry?\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/\",\n        children: \"Foundry\"\n      }), \" is a blazingly fast, portable and modular toolkit for Ethereum application development written in Rust.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Why Foundry?\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Write all your code ONLY in Solidity (i.e. scripts, tests, all in Solidity)!\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Speedrun your developer journey without having to learn multiple languages.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How Foundry?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Glad you asked 🔥.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's dive right in!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[0]: Install Foundry\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Foundry is installed using Foundryup.\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `curl -L https://foundry.paradigm.xyz | bash`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Source your \", _jsx(_components.code, {\n        children: \".zshenv\"\n      }), \" file to ensure the path is updated.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `source /Users/your_username/.zshenv`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To verify the installation, run the following command:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge --version\n// forge 0.x.x ...\ncast --version\n// cast 0.x.x ...`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additional resource from Foundry Book specific to \", _jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/getting-started/installation\",\n        children: \"installation\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[1]: Create a Foundry Project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a new project and navigate into it.\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `mkdir foundry-project\ncd foundry-project`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"forge init\"\n      }), \" in your terminal to create a new Foundry project.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge init`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[2]: Compiling a Foundry Project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, we will use a simple EtherWallet example below:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract EtherWallet {\naddress payable public owner;\n\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    receive() external payable {}\n\n    function withdraw(uint _amount) external {\n        require(msg.sender == owner, \"caller is not owner\");\n        payable(msg.sender).transfer(_amount);\n    }\n\n    function getBalance() external view returns (uint) {\n        return address(this).balance;\n    }\n\n}`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rename \", _jsx(_components.code, {\n        children: \"Contract.sol\"\n      }), \" in \", _jsx(_components.code, {\n        children: \"src/Contract.sol\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"EtherWallet.sol\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Delete \", _jsx(_components.code, {\n        children: \"src/test\"\n      }), \" folder. We will not be using it in this Speedrun lesson.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"forge build\"\n      }), \" to compile the contract:\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge build\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Navigate to the \", _jsx(_components.code, {\n        children: \"out\"\n      }), \" folder and you will see the compiled contract \", _jsx(_components.code, {\n        children: \"EtherWallet.json\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[3]: Deploying on anvil\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Anvil is a local testnet node shipped with Foundry.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"anvil\"\n      }), \" in your terminal.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project anvil\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command spins up a local server hosted on http://localhost:8545 that runs the test network. (Server URL can vary depending on user environment)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To deploy on anvil, run:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// $foundry-project forge create <NAME CONTRACT> --rpc-url <LOCALHOST> --interactive\nforge create EtherWallet --rpc-url http://localhost:8545 --interactive\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will be prompted to enter your private key. Go into the anvil terminal, then copy any private key from the terminal.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Paste it in the terminal where you are deploying the contract.\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// $foundry-project forge create <NAME CONTRACT> --rpc-url <LOCALHOST> --interactive\nforge create EtherWallet --rpc-url http://localhost:8545 --interactive\n// paste anvil private key\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After running the command, you should see an output similar to this:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `Deployer: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\nDeployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3\nTransaction hash: 0x4b1d82d3d33674496088b5e92e99494280ffcc1f27035269873a5ca04c432c93\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[4]: Deploying with Script\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Foundry allows you to deploy smart contracts by running a script. Scripts are recognisable through the \", _jsx(_components.code, {\n        children: \"s.sol\"\n      }), \" extension and stored in \", _jsx(_components.code, {\n        children: \"/scripts\"\n      }), \" folder.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is what a script example named \", _jsx(_components.code, {\n        children: \"DeployEtherWallet.s.sol\"\n      }), \" would look like:\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport { Script, console2 } from \"forge-std/Script.sol\";\nimport { EtherWallet } from \"../src/EtherWallet.sol\";\n\ncontract EtherWalletScript is Script {\nfunction run() external returns (EtherWallet) {\nvm.startBroadcast();\n\n       EtherWallet etherWallet = new EtherWallet();\n\n       vm.stopBroadcast();\n       return etherWallet;\n\n}\n}\n`,\n      language: \"solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"anvil\"\n      }), \" to simulate onchain transactions.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge script script/DeployEtherWallet.s.sol --rpc-url http://localhost:8545 --broadcast\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Forge simulates the script and \", _jsx(_components.code, {\n        children: \"—broadcast\"\n      }), \" flag was added to broadcast the transaction.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[5]: Setting up Deployment Environment\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are two ways to do this in Foundry. One is the traditional way of using a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file and the other is by using Foundry tools. Patrick Collins did an amazing job explaining it \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/watch?v=VQe7cIpaE54\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll start off with explaining the awesome way using Foundry!\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using Foundry Tools\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Open your local machine terminal and run:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// cast wallet import <ACCOUNT_NAME> --interactive\ncast wallet import defaultKey --interactive\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You will be prompted to enter your private key and a password to secure \", _jsx(_components.code, {\n        children: \"<ACCOUNT_NAME>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REMINDER: We recommend to pass your private key and a password on your computer's terminal and NOT the code editor.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For additional security measures:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Leveled up security - Delete your history by running the following command:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `history -c\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Godlike security - Run \", _jsx(_components.code, {\n        children: \"rm <TERMINAL_HISTORY>\"\n      }), \" to delete your terminal history!\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `rm .bash_history\n// or rm .zsh_history if you use zsh shell\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, run the command below to see the list of all accounts available:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `cast wallet list\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Using \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" File\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file in the root directory of your project.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project touch .env\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"File contents would look like this:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `PRIVATE_KEY=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\nRPC_URL=http://localhost:8545\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Load \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file in foundry by running:\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project source .env\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To deploy a contract, you can now run:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge script script/DeployEtherWallet.s.sol --rpc-url $RPC_URL --broadcast --private-key $PRIVATE_KEY\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"REMINDER: You should \", _jsx(_components.strong, {\n        children: \"NEVER\"\n      }), \" place a private key or a secret phrase in a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file that is associated with real funds! This is a HUGE security risk. (If you have not taken the .env pledge, do it \", _jsx(_components.a, {\n        href: \"https://github.com/smartcontractkit/full-blockchain-solidity-course-js/discussions/5\",\n        children: \"NOW\"\n      }), \"!)\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[6]: Deploy on Scroll Sepolia Network\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Setting up Scroll Sepolia Network & Testnet Funds\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We're almost there to deployment!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First let's add the Scroll network to your metamask.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Head over to \", _jsx(_components.a, {\n        href: \"https://sepolia.scroll.io/portal\",\n        children: \"Scroll Sepolia\"\n      }), \" and add Scroll Sepolia testnet to your wallet.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: Check out this quick \", _jsx(_components.a, {\n        href: \"https://twitter.com/BuildWithScroll/status/1714789104129581454\",\n        children: \"video on X\"\n      }), \" if you prefer adding Scroll Sepolia via \", _jsx(_components.a, {\n        href: \"https://chainlist.org/chain/534351\",\n        children: \"Chainlist\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we've added the network to our MetaMask, \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"click here\"\n      }), \" to join Level Up Telegram group for Scroll Sepolia ETH or visit the faucet links in \", _jsx(_components.a, {\n        href: \"https://docs.scroll.io/en/user-guide/faucet/\",\n        children: \"Scroll's Faucet documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you run into issues with testnet eth, please let us know in the Level Up Telegram group.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Deploying to Scroll Sepolia\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Contract deployment uses \", _jsx(_components.code, {\n        children: \"forge create\"\n      }), \" command.\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge create <CONTRACT_NAME> --rpc-url <NETWORK> --account <ACCOUNT_NAME>\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this case, the command will look like this:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `$foundry-project forge create EtherWallet --rpc-url https://sepolia-rpc.scroll.io/ --account defaultKey --broadcast\n// optional: add -vvv for verbose output (add v's as needed to increase verbosity)\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Enter your password and voila! Your contract is deployed on Scroll Sepolia!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are updating the \", _jsx(_components.code, {\n        children: \"RPC_URL\"\n      }), \" in \", _jsx(_components.code, {\n        children: \".env\"\n      }), \", remember to run \", _jsx(_components.code, {\n        children: \"source .env\"\n      }), \" to reload the environment variable changes.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[7]: Contract Verification\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Verifying your contract makes your contract readable on a block explorer like Etherscan or \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://sepolia.scrollscan.com/\",\n          children: \"Scrollscan\"\n        })\n      }), \". This also provides a user interface for contract interaction.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will first need API keys to verify your contract via Foundry. Here's how to do this:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create an account at https://scrollscan.com/register\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Get API Keys from your account\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an explainer \", _jsx(_components.a, {\n        href: \"https://youtu.be/ks9Cj-lP1Tw?t=360\",\n        children: \"video\"\n      }), \" if you are stuck.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Update your \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file to include two new variables:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"VERIFIER_URL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SCROLLSCAN_API_KEY\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Reload the environment variables by running \", _jsx(_components.code, {\n        children: \"source .env\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The command structure for verifying contract is as follows:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge verify-contract <CONTRACT_ADDRESS> <CONTRACT_NAME>\n  --verifier-url <BLOCK_EXPLORER_URL> \\\n  --etherscan-api-key <SCROLLSCAN_API_KEY> \\\n  --constructor-args <CONSTRUCTOR_ARGUMENTS> //if any`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is an example of my command with a random contract address:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge verify-contract 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 EtherWallet\n  --verifier-url $VERIFIER_URL \\\n  --etherscan-api-key $SCROLLSCAN_API_KEY \\\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[8]: Contract Interaction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can interact with your smart contract by using the \", _jsx(_components.code, {\n        children: \"cast\"\n      }), \" command.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is the general structure to using \", _jsx(_components.code, {\n        children: \"cast\"\n      }), \":\"]\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `cast [options] <CONTRACT_FUNCTION> [args]\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"While there are many \", _jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/reference/cast/cast?highlight=cast#cast\",\n        children: \"options\"\n      }), \" available to interact with contracts, we focus on the two common options: \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"send\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"call\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To retrieve data from the contract in the blockchain:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// Get the balance of the contract\n$foundry-project cast call 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 \"getBalance()\" --rpc-url $RPC_URL\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"NOTE: Private key does not need to be passed in \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" command as it does not require any transaction to be sent.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"send\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To execute function in the contract:\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// Send 0.1 Ether to the contract\n$foundry-project cast send 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 --value 100000000000000000 --private-key $PRIVATE_KEY --rpc-url $RPC_URL\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `// Withdraw 0.000099999999999999 Ether\n$foundry-project cast send 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 \"withdraw(uint)\" 99999999999999990 --private-key $PRIVATE_KEY --rpc-url $RPC_URL\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Foundry summary\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You made it to the end of speedrunning Foundry Smart Contract Development! 🎉\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We have learned that:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Foundry is a smart contract development toolchain that simplifies the smart contract development.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Comes with HUGEEE set of tools to compile, deploy, and interact with smart contracts.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At Level Up, we have identified the five tools that you will commonly use in Foundry. These include:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"1. Create a Foundry project\"\n      })\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge init\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"2. Compiling\"\n      })\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge build\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"3. Initializing a local blockchain on Foundry\"\n      })\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `anvil\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"4. Contract Deployment\"\n      })\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `forge create <CONTRACT_NAME> --rpc-url <NETWORK> --account <ACCOUNT_NAME>\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"5. Contract Interaction\"\n      })\n    }), \"\\n\", _jsx(ContentCopy, {\n      code: `cast [options] <CONTRACT_FUNCTION> [args]\n`,\n      language: \"bash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that you have grasped Level Zero of Foundry, you are ready to dive into the world of smart contract development! 🚀\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
      "frontmatter": {},
      "scope": {}
    }
  }
]